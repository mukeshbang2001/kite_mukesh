#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('kite-trade:server');
var http = require('http');
var WebSocketServer = require('websocket').server;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

io.on('connection', function(socket){
    console.log('A new WebSocket connection has been established');
});

setInterval(function() {
    var stockprice = Math.floor(Math.random() * 1000);
    io.emit('stock price update', stockprice);
}, 50);



wsServer = new WebSocketServer({
    httpServer: server
});
// WebSocket server
wsServer.on('request', function(request) {
  console.log("ws Request")
    var connection = request.accept(null, request.origin);

    console.log("Initiating the tickManager")
    // FIXME : not the cleanest way to do this..
    var TickManager = require('./tick1.js')({connection: connection})

    connection.on('open', function(connection) {
        // close user connection
        console.log("conn open: " + connection)
    });

    // This is the most important callback for us, we'll handle
    // all messages from users here.
    connection.on('message', function(message) {
        console.log("ws msg: %j", message)
        if (message.type === 'utf8') {
            connection.sendUTF(message.utf8Data);
            connection.send(JSON.stringify({msg: 'from server'}));
            connection.send('Hello');
            // process WebSocket message
        }
    });

    connection.on('close', function(connection) {
        // close user connection
        console.log("conn close: " + connection)
    });
});
